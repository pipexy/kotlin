version: '3.8'

services:
  # Router Application
  router:
    build: .
    ports:
      - "8080:8080"
      - "554:554"      # RTSP
      - "1935:1935"    # RTMP
      - "8081:8081"    # HLS/DASH
    environment:
      # General Configuration
      - JAVA_OPTS=-XX:+UseG1GC -XX:MaxGCPauseMillis=50 -XX:+UseStringDeduplication
      # Message Brokers
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - RABBITMQ_HOST=rabbitmq
      - MQTT_BROKER_URL=tcp://mosquitto:1883
      # Databases
      - MONGODB_URI=mongodb://mongodb:27017
      - REDIS_HOST=redis
      - ELASTICSEARCH_HOSTS=elasticsearch:9200
      # Streaming
      - RTSP_PORT=554
      - HLS_PATH=/streaming/hls
      - DASH_PATH=/streaming/dash
      # Cloud (mock for local dev)
      - AWS_ENDPOINT=http://localstack:4566
    volumes:
      - ./config:/app/config
      - ./media:/app/media
      - ./transcoded:/app/transcoded
    depends_on:
      - kafka
      - rabbitmq
      - mosquitto
      - mongodb
      - redis
      - elasticsearch
      - nginx-rtmp
      - media-converter
    networks:
      - router-net
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G

  # Streaming Services
  nginx-rtmp:
    image: tiangolo/nginx-rtmp
    ports:
      - "1935:1935"    # RTMP
      - "8082:8082"    # HLS
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./streaming:/opt/streaming
    networks:
      - router-net

  media-converter:
    image: jrottenberg/ffmpeg:4.4-alpine
    command: -hide_banner
    volumes:
      - ./media:/input
      - ./transcoded:/output
    networks:
      - router-net

  streaming-server:
    build:
      context: ./streaming
      dockerfile: Dockerfile.streaming
    ports:
      - "554:554"      # RTSP
      - "8083:8083"    # HLS/DASH
    volumes:
      - ./streaming:/streaming
    environment:
      - TRANSCODING_PROFILES=high,medium,low
      - HLS_SEGMENT_DURATION=6
      - DASH_SEGMENT_DURATION=4
    networks:
      - router-net

  # Message Brokers
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - router-net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - router-net

  rabbitmq:
    image: rabbitmq:3.11-management
    ports:
      - "5672:5672"    # AMQP
      - "15672:15672"  # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - router-net

  mosquitto:
    image: eclipse-mosquitto:2.0
    ports:
      - "1883:1883"    # MQTT
      - "9001:9001"    # WebSocket
    volumes:
      - ./config/mosquitto:/mosquitto/config
      - mosquitto-data:/mosquitto/data
      - mosquitto-log:/mosquitto/log
    networks:
      - router-net

  # Databases
  mongodb:
    image: mongo:6.0
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    networks:
      - router-net

  redis:
    image: redis:7.0-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - router-net

  elasticsearch:
    image: elasticsearch:8.7.0
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - router-net

  # File Services
  ftp-server:
    image: fauria/vsftpd
    ports:
      - "20-21:20-21"
      - "21100-21110:21100-21110"
    environment:
      - FTP_USER=user
      - FTP_PASS=pass
    volumes:
      - ftp-data:/home/vsftpd
    networks:
      - router-net

  sftp-server:
    image: atmoz/sftp
    ports:
      - "2222:22"
    command: user:pass:1001
    volumes:
      - sftp-data:/home/user
    networks:
      - router-net

  # RSS and Feed Services
  rss-aggregator:
    build:
      context: ./rss
      dockerfile: Dockerfile.rss
    ports:
      - "8084:8084"
    environment:
      - FEED_REFRESH_INTERVAL=300
      - MAX_FEEDS=1000
    volumes:
      - ./feeds:/app/feeds
    networks:
      - router-net

  # Monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    networks:
      - router-net

  grafana:
    image: grafana/grafana:10.0.3
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./config/grafana:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    networks:
      - router-net

  jaeger:
    image: jaegertracing/all-in-one:1.47
    ports:
      - "16686:16686"  # UI
      - "6831:6831/udp"  # Thrift
    networks:
      - router-net

  # Development Tools
  localstack:
    image: localstack/localstack
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3,sqs,sns
      - DEBUG=1
    volumes:
      - localstack-data:/tmp/localstack
    networks:
      - router-net

  mailhog:
    image: mailhog/mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - router-net

volumes:
  mongodb-data:
  redis-data:
  elasticsearch-data:
  rabbitmq-data:
  mosquitto-data:
  mosquitto-log:
  prometheus-data:
  grafana-data:
  ftp-data:
  sftp-data:
  localstack-data:

networks:
  router-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16