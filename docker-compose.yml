services:
  router:
    build:
      context: ./services/router
      dockerfile: Dockerfile
    ports:
      - "50051:50051"
    volumes:
      - ./config:/config
      - ./certs/router.pem:/certs/router.pem:ro
      - ./certs/ca.crt:/certs/ca.crt:ro
    env_file: .env
    networks:
      - pipexy-net

  grpc-web-proxy:
    image: envoyproxy/envoy:v1.22.0
    ports:
      - "8080:8080"
    volumes:
      - ./config/envoy.yaml:/etc/envoy/envoy.yaml:ro
      - ./certs:/certs:ro
    networks:
      - pipexy-net

  decoder:
    build: 
      context: ./services/decoder
      dockerfile: Dockerfile
    ports:
      - "${DECODER_PORT}:${DECODER_PORT}"
    volumes:
      - ./models:/models
      - ./config:/config
      - ./certs/decoder.pem:/certs/decoder.pem:ro
      - ./certs/ca.crt:/certs/ca.crt:ro
    env_file: .env
    networks:
      - pipexy-net

  encoder:
    build:
      context: ./services/encoder
      dockerfile: Dockerfile
    ports:
      - "${ENCODER_PORT}:${ENCODER_PORT}"
    volumes:
      - ./config:/config
      - ./certs/encoder.pem:/certs/encoder.pem:ro
      - ./certs/ca.crt:/certs/ca.crt:ro
    env_file: .env
    networks:
      - pipexy-net

  scaler:
    build:
      context: ./services/scaler
      dockerfile: Dockerfile
    ports:
      - "${SCALER_PORT}:${SCALER_PORT}"
    volumes:
      - ./config:/config
      - ./certs/scaler.pem:/certs/scaler.pem:ro
      - ./certs/ca.crt:/certs/ca.crt:ro
    env_file: .env
    networks:
      - pipexy-net

  motion:
    build:
      context: ./services/motion
      dockerfile: Dockerfile
    ports:
      - "${MOTION_PORT}:${MOTION_PORT}"
    volumes:
      - ./models:/models
      - ./config:/config
      - ./certs/motion.pem:/certs/motion.pem:ro
      - ./certs/ca.crt:/certs/ca.crt:ro
    env_file: .env
    networks:
      - pipexy-net

  object:
    build:
      context: ./services/object
      dockerfile: Dockerfile
    ports:
      - "${OBJECT_PORT}:${OBJECT_PORT}"
    volumes:
      - ./models:/models
      - ./config:/config
      - ./certs/object.pem:/certs/object.pem:ro
      - ./certs/ca.crt:/certs/ca.crt:ro
    env_file: .env
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - pipexy-net

  audio:
    build:
      context: ./services/audio
      dockerfile: Dockerfile
    ports:
      - "${AUDIO_PORT}:${AUDIO_PORT}"
    volumes:
      - ./models:/models
      - ./config:/config
      - ./certs/audio.pem:/certs/audio.pem:ro
      - ./certs/ca.crt:/certs/ca.crt:ro
    env_file: .env
    networks:
      - pipexy-net

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "${PROMETHEUS_PORT}:${PROMETHEUS_PORT}"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - pipexy-net

  grafana:
    image: grafana/grafana:latest
    ports:
      - "${GRAFANA_PORT}:${GRAFANA_PORT}"
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
    networks:
      - pipexy-net

volumes:
  prometheus_data:
  grafana_data:

networks:
  pipexy-net:
    driver: bridge
